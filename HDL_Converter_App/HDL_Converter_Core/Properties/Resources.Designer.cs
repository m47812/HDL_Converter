//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

namespace HDL_Converter_Core.Properties {
    using System;
    
    
    /// <summary>
    ///   Eine stark typisierte Ressourcenklasse zum Suchen von lokalisierten Zeichenfolgen usw.
    /// </summary>
    // Diese Klasse wurde von der StronglyTypedResourceBuilder automatisch generiert
    // -Klasse über ein Tool wie ResGen oder Visual Studio automatisch generiert.
    // Um einen Member hinzuzufügen oder zu entfernen, bearbeiten Sie die .ResX-Datei und führen dann ResGen
    // mit der /str-Option erneut aus, oder Sie erstellen Ihr VS-Projekt neu.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "16.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Gibt die zwischengespeicherte ResourceManager-Instanz zurück, die von dieser Klasse verwendet wird.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("HDL_Converter_Core.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Überschreibt die CurrentUICulture-Eigenschaft des aktuellen Threads für alle
        ///   Ressourcenzuordnungen, die diese stark typisierte Ressourcenklasse verwenden.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die A declaration command prints the declaration of all 
        ///wires contained in the given modules header
        ///
        ///Command can be used like the following examples:
        ///d
        ///d -c0
        ///d -d0 -c1
        ///
        ///Available Modifiers:
        ///-d0 : Will not include direction comments ignoring default settings
        ///-d1 : Will include direction comments ignoring default settings ignoring default settings
        ///-c0 : Will not include the comments contained in the input header ignoring default settings
        ///-c1 : Will include the comments contained in the input header i [Rest der Zeichenfolge wurde abgeschnitten]&quot;; ähnelt.
        /// </summary>
        internal static string HELP_DECLARATION {
            get {
                return ResourceManager.GetString("HELP_DECLARATION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die A instatntiation will create the syntax needed to instantiate a module
        ///that is given as input.
        ///
        ///Command can be used like the following examples:
        ///i
        ///i -e1
        ///i -e1 -d0 -c1
        ///
        ///Available Modifiers:
        ///-s0 : Will Create empty signal assignments ignoring default settings (e.g. .paramOne(paramOne) becomes .paramOne())
        ///-s1 : Will Create filled signal assignments with same name ignoring default settings (e.g. .paramOne(paramOne))
        ///-d0 : Will not include direction comments ignoring default settings
        ///-d1 : Will incl [Rest der Zeichenfolge wurde abgeschnitten]&quot;; ähnelt.
        /// </summary>
        internal static string HELP_INSTANCIATION {
            get {
                return ResourceManager.GetString("HELP_INSTANCIATION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die The &quot;t&quot; command will generate a testbench structure as seen bellow.
        ///It consists of a verify block that the user can modify with the simulations stimuli and asserts
        ///and a top level file that contains the instantiations for both the verify and the user
        ///given module.
        ///
        ///    Top Level
        ///    -----------------------------------------
        ///    |   Verify              User Module     |
        ///    |   -------------       -------------   |
        ///    |   |           |       |           |   |
        ///    |   |           |------&gt;|          [Rest der Zeichenfolge wurde abgeschnitten]&quot;; ähnelt.
        /// </summary>
        internal static string HELP_TESTBENCH {
            get {
                return ResourceManager.GetString("HELP_TESTBENCH", resourceCulture);
            }
        }
    }
}
